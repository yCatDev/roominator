@page "/menu"
@using Microsoft.AspNetCore.Identity
@using Newtonsoft.Json
@inject NavigationManager NavManager
@inject SignInManager<IdentityUser> SignInManager
@inject UserManager<IdentityUser> UserManager
@inject Microsoft.AspNetCore.Http.IHttpContextAccessor _httpContextAccessor
@inject IJSRuntime JS

<div style="display: none">
    <button @onclick="SomeStartupMethod">BUTTON</button>
</div>

<!---------------------------------- Page ------------------------------------->
<AuthorizeView>
    <NotAuthorized>
        <style>
            .LandingHeader{
                display: none;
            }
        </style>
        <div class="BluePrintWindow" id="RoomsMenu">
            <img src="/images/logo/logo_shadow.png" alt="Roominator logo" class="AuthLogo">
            <p class="UnAuthorizedMessage">Будь ласка, авторизуйтесь</p>
            <a href="/Identity/Pages/Account/login" class="BlueButton UnAuthorizedButton"> Вхід </a>
            <a href="/Identity/Account/Register" class="BlueButton UnAuthorizedButton"> Реєстрація </a>
        </div>
        @*<div class="MenuWindow" id="RoomsMenu">
            <p class="UnAuthorizedMessage">Для доступу до цього розділу необхідно авторизуватися</p>
            <a href="/Identity/Pages/Account/login" class="BlueButton UnAuthorizedButton"> Вхід </a>
        </div>*@
    </NotAuthorized>
    <Authorized>
        <div class="MenuWindow" id="RoomsMenu">
            <div class="RoomsContainer Constructor">
                <!-- Код 1 кнопки  -->
                <!-- Кнопки вставлять сюда -->
                @foreach (var room in userRooms)
                {
                    <div class="RoomCard">
                        <img src="@DesignerBridge.GetPreviewImage(room)" alt="Room" class="RoomImage" @onclick="(()=>EditRoom(room))">
                        <p class="RoomTitle" @onclick="(()=>EditRoom(room))">Комната</p>

                        <button class="RoomShare RoomCardButton" @onclick="(()=>FacebookShare(room))">
                            <img src="/images/icons/plan/share.png" alt="Share" class="RoomCardIcon">
                        </button>
                        <button class="RoomDelete RoomCardButton" @onclick="(()=>DeleteRoom(room.RoomId))">
                            <img src="/images/icons/plan/delete.png" alt="Delete" class="RoomCardIcon">
                        </button>
                    </div>
                }

                @if (Program.mobileHelper.GetEntry() == Entry.PC && countOfRooms < 3 && refreshDone == true)
                {
                    <button class="AddRoom" @onclick="CreateRoom">
                        <img src="/images/icons/plus.png" alt="Add Room" class="AddRoomIcon">
                        <p class="AddRoomSign">Новий план</p>
                    </button>
                }
                <div class="CardSpace"></div><div class="CardSpace"></div>


            </div>

            @if (countOfRooms == 3)
            {
                <div class="LimitMessage">
                    <p class="LimitTitle">Ви досягли ліміту безкоштовної версії</p>
                    <button class="LimitButton" @onclick="GoToPlans">Придбати преміум</button>
                </div>
            }

        </div>
        <a href="/plans" class="LinkButton HeaderLink HeaderLinkRight"> Плани </a>
    </Authorized>
</AuthorizeView>





@code{
    @using Newtonsoft.Json;
    private string userId;
    private UserRoom[] userRooms = new UserRoom[0];
    private int countOfRooms;
    private bool refreshDone = false;

    async Task SomeStartupMethod()
    {
        Program.manager.getCode(NavManager.Uri);
        Program.manager.getInfoFromGoogleAnswer(await Program.manager.sendRequestToExchangeCodeForAccessTokenAsync());
        await Program.manager.sendRequestAsync();
    }

    private async void CreateRoom()
    {
        // Переход в редактор и создание новой комнаты (userId - текущий юзер, его почта)
        // Этот метод можна вызвать только с пк
        int id = await DesignerBridge.CreateRoom(userId);
        DesignerBridge.SelectedUserID = userId;
        DesignerBridge.GeneratedUserRoom = await DesignerBridge.GetUserRoomById(userId, id);
        NavManager.NavigateTo("/designer");
    }

    private void EditRoom(UserRoom room)
    {
        
        if (Program.mobileHelper.GetEntry() == Entry.PC)
        {
            // переход в редактор и редактирование комнаты (userId - текущий юзер, его почта)
            DesignerBridge.SelectedUserID = userId;
            DesignerBridge.GeneratedUserRoom = JsonConvert.SerializeObject(room);
            NavManager.NavigateTo("/designer");
            
        }
        else if (Program.mobileHelper.GetEntry() != Entry.Unknown)
        {
            // Если метод вызван с мобилки, просто показывает картинку плана
            RoomView.ShowPlan(DesignerBridge.GetPreviewImage(room));
            NavManager.NavigateTo("/roomview");
        }
        
    }

    private void RedirectTo(string path)
    {
       JS.InvokeVoidAsync(
            "RedirectTo", path);
    }    
    
    private void FacebookShare(UserRoom room)
    {
        string url = DesignerBridge.GetPreviewImage(room);
        NavManager.NavigateTo("https://www.facebook.com/sharer.php?u=http%3A%2F%2Froominator-nure.herokuapp.com/images/room_placeholder.png");
    }

    private async void DeleteRoom(int roomId)
    {
        await DesignerBridge.RemoveRoom(userId, roomId);
        refreshDone = false;
        await Refresh();
    }

    private async Task Refresh()
    {
        userId = _httpContextAccessor.HttpContext.User.Identity.Name;
        userRooms = await DesignerBridge.GetUserRooms(userId);
        countOfRooms = userRooms.Length;
        StateHasChanged();
        refreshDone = true;
    }

    private async Task StartupMethod()
    {
        Program.mobileHelper.CheckDevice(@_httpContextAccessor.HttpContext.Request.Headers["User-Agent"].ToString());
        await Refresh();
    }

    private Task StartupTask()
    {
        return Task.CompletedTask;
    }

    protected override async Task OnInitializedAsync()
    {
        await StartupMethod();
        await StartupTask();
    }

    private void GoToPlans()
    {
        NavManager.NavigateTo("/plans");
    }

}
